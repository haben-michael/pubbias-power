## [8/7/24 fix--this was returning the coefficient rather than the
## actual test stat]
egger.test <- function(y,v,robust=FALSE) {
    lm0 <- if(robust) {
               estimatr::lm_robust(I(y/sqrt(v)) ~ I(1/sqrt(v)))
           } else {
               lm(I(y/sqrt(v)) ~ I(1/sqrt(v)))
           }
    ## structure(unname(coef(summary(lm0))[1,c(1,4)]), names=c('stat','pval'))
    structure(unname(coef(summary(lm0))[1,c(3,4)]), names=c('stat','pval'))
}
## checked against metafor in #13a
begg.test <- function(y,v,method='kendall',...) {
    theta.fe <- sum(y/v)/sum(1/v)
    with(cor.test((y-theta.fe)/sqrt(v-1/sum(1/v)),v,method=method,...),
         structure(unname(c(stat=estimate,pval=p.value)),names=c('stat','pval')))    
}
lin.test <- function(y,v) {
    with(altmeta::metapb(y=y,s2=v,model='FE'),
         structure(unname(c(stat=skewness,pval=skewness.pval)),names=c('stat','pval')))             
}
f.test <- function(y,v) {
    n <- length(y)
    theta.fe <- sum(y/v)/sum(1/v)
    regressand <- (y-theta.fe)/sqrt(v)
    lm0 <- lm(regressand ~ I(1/sqrt(v)))
    f.stat <- ((sum(regressand^2)-sum(resid(lm0)^2)) / 2) / (sum(resid(lm0)^2) / (n-2))
    pval <- 1-pf(f.stat,2,n-2)
    structure(c(unname(coef(lm0)),pval), names=c('stat.egger','stat.begg','pval'))
}
rlin <- function(n,mean=0,keep.prob=1,rsigma=function(n)runif(n,1,2),var.between=0,method,alpha.cutoff=.05) {
    y  <- sigma <- numeric()
    tries <- 0
    while(length(y)<n) {
        tries <- tries+1
        sigma.try <- rsigma(1)
        ## sigma.try <- rchisq(1,df=1)
        ## sigma.try <- rbeta(1,1/2,1/2)
        y.try <- rnorm(1,mean,sd=sqrt(var.between+sigma.try^2))
        cutoff <- sigma.try*qnorm(1-alpha.cutoff)
        if(switch(method,
                  '1' = y.try>cutoff || rbinom(1,1,keep.prob),
                  '2' = y.try>cutoff || sigma.try<=1.5 || rbinom(1,1,keep.prob),
                  '3a' = y.try>cutoff/sigma.try || rbinom(1,1,keep.prob)
                  ))
        {
            y <- c(y,y.try); sigma <- c(sigma,sigma.try)
        }
    }
    ## print(tries)
    return(list(y=y,sigma=sigma))
}





rnorm.trunc <- function(n,mean,sd,lower) {u <- runif(n); mean+sd*qnorm(u+pnorm((lower-mean)/sd)*(1-u))}
dnorm.trunc <- function(x,mean,sd,lower) (x>=lower) * 1/sd * dnorm((x-mean)/sd) / (1-pnorm((lower-mean)/sd))
pnorm.trunc <- function(q,mean,sd,lower) (q>=lower)*(pnorm((q-mean)/sd) - pnorm((lower-mean)/sd)) / (1-pnorm((lower-mean)/sd))

rnorm.effect.cutoff <- function(n,grand.mean=0,rvar.within=runif,var.between=0,effect.cutoff=-Inf) {
        var.within <- rvar.within(n)
        y <- rnorm.trunc(n,mean=grand.mean,sd=sqrt(var.within+var.between),lower=effect.cutoff) 
        ## est.v.bw(y,v.wi)
        return(list(y=y,v=var.within))
}




## usual method of moments 'tau^2' estimator
est.var.between <- function(y,var.within) {
    n <- length(y)
    theta.fe <- sum(y/var.within/sum(1/var.within))
    Q <- sum((y-theta.fe)^2/var.within)
    v.bw.hat <- max(0, (Q-n+1)/(sum(1/var.within)-sum(1/var.within^2)/sum(1/var.within)))    
}







## formulas for uniform model at null (pubbias #5)
E.cond <- function(q,theta2,u3) {
    ## pos.idx <- theta2>0
    ## with(list(q=q[pos.idx],theta2=theta2[pos.idx],u3=u3[pos.idx]), {
    lim1 <- pmin(u3,pmax(0,-q/theta2))#pmax(0,pmin(u3,-q/theta2))
    lim2 <- pmax(lim1,pmin(u3,(1-q)/theta2))#pmin(u3,pmax(lim1,(1-q)/theta2))
    lim3 <- pmax(0,pmin(u3,-q/theta2))#pmin(u3,pmax(0,-q/theta2))
    lim4 <- pmin(lim3,pmax(0,(1-q)/theta2))#pmax(0,pmin(lim3,(1-q)/theta2))
    (lim2 - q*(lim2-lim1)-theta2/2*(lim2^2-lim1^2))   *  (theta2>0) + 
        (u3-lim4-q*(lim3-lim4)-theta2/2*(lim3^2-lim4^2))  *  (theta2<0) +
        (1-pmax(0,pmin(1,q)))*u3   *   (theta2==0)
}
E.diff.cond <- E.cond ## deprecate E.cond
E.diff <- function(q,theta.2)
    if (theta.2<1) {
        (1-1/2/theta.2*(1-q)^2)*(1>=q & q>=1-theta.2) + (q+theta.2/2)*(q<=1-theta.2 & q>=0) + (theta.2/2*(1+q/theta.2)^2)*(q<=0 & q>=-theta.2) + (q>=1)
    } else {
        (1-1/2/theta.2*(1-q)^2)*(1>=q & q>=0) + (1-1/2/theta.2+q/theta.2)*(q<=0 & q>=1-theta.2) + (theta.2/2*(1+q/theta.2)^2)*(q<=1-theta.2 & q>=-theta.2) + (q>=1)
    }
E.uncond  <- function(theta2) { # P((T1-theta2*T2)*T2<0)
    L0 <- pmin(1/theta2,1)
    L2 <- pmin(1,-1/theta2)
    ## 2 * ((L2/2+1/2*(theta2-1/2)*L2^2+1/3*(theta2^2/2-theta2)*L2^3-theta2^2/8*L2^4) * (theta2<0) +   (1/2-L0/2+(theta2/2+1/4)*L0^2-(theta2^2/6+theta2/3)*L0^3+1/8*theta2^2*L0^4)*(theta2>0) + (1/4)*(theta2==0))
    2*ifelse(theta2<0, (L2/2+1/2*(theta2-1/2)*L2^2+1/3*(theta2^2/2-theta2)*L2^3-theta2^2/8*L2^4), ifelse(theta2>0,(1/2-L0/2+(theta2/2+1/4)*L0^2-(theta2^2/6+theta2/3)*L0^3+1/8*theta2^2*L0^4),1/4))
    ## 2/theta^2 * ( (theta>0)*(theta^2/2-1/2*pmin(theta,theta^2)+(theta/2+1/4)*pmin(1,theta^2)-(theta/6+1/3)*pmin(1,theta^3)+1/8*pmin(1,theta^4)) + (theta<0)*( 1/2*pmin(theta^2,abs(theta)) + 1/2*(theta-1/2)*pmin(theta^2,1) + 1/3*(1+abs(theta)/2)*pmin(abs(theta)^3,theta^2)-1/8*pmin(1,theta^4)) + (theta==
}
mu0.uncond <- function(theta2) 2*E.uncond(theta2) - 1
## mu0 <- function(z1,s1,theta.2)4*E.diff.cond(z1+1/2-theta.2*s1, theta.2, s1) - 2*E.diff.cond(z1+1/2-theta.2*s1, theta.2,1)-2*s1+1
## 2*P((z1-z2-theta.2*(s1-s2))*(s1-s2)<0 | z1,s1) - 1
mu0 <- function(z1,s1,theta.2,mean.s=1/2)4*E.diff.cond(z1+1/2-theta.2*(s1-(mean.s-1/2)), theta.2, s1-(mean.s-1/2)) - 2*E.diff.cond(z1+1/2-theta.2*(s1-mean.s+1/2), theta.2,1)-2*(s1-mean.s+1/2)+1
hajek.kernel.unif <- function(z,s,theta,mean.s=mean.s) {
        2*mu0(z,s,theta,mean.s=mean.s) - mu0.uncond(theta)#2*theta/3*(1-theta/4)
    }
hajek.unif <- function(z,s,theta,mean.s=1/2){
    ## theta.fe <- sum(z*s)/sum(s^2)
    2*mean(mu0(z,s,theta,mean.s=mean.s)) - mu0.uncond(theta)#2*theta/3*(1-theta/4)#- mu0(z,s,0,mean.s=mean.s))
}
## ## renaming mu0 to mu.cond, using mu to refer to the true mean
## mu.cond <- function(z1,s1,theta.2,mean.s=1/2)4*E.diff.cond(z1+1/2-theta.2*(s1-(mean.s-1/2)), theta.2, s1-(mean.s-1/2)) - 2*E.diff.cond(z1+1/2-theta.2*(s1-mean.s+1/2), theta.2,1)-2*(s1-mean.s+1/2)+1
## mu <- function(theta)
## hajek.kernel.unif <- function(z,s,theta,mean.s=mean.s) {
##         2*mu.cond(z,s,theta,mean.s=mean.s) - 2*theta/3*(1-theta/4)
##     }
## hajek.unif <- function(z,s,theta,mean.s=1/2){
##     ## theta.fe <- sum(z*s)/sum(s^2)
##     2*mean(mu.cond(z,s,theta,mean.s=mean.s)) - 2*theta/3*(1-theta/4)#- mu.cond(z,s,0,mean.s=mean.s))
## }
## E.uncond <- function(theta2) {
##     L0 <- pmin(1/theta2,1)
##     L2 <- pmin(1,-1/theta2)
##     (L2/2+1/2*(theta2-1/2)*L2^2+1/3*(theta2^2/2-theta2)*L2^3-theta2^2/8*L2^4) * (theta2<0) +   (1/2-L0/2+(theta2/2+1/4)*L0^2-(theta2^2/6+theta2/3)*L0^3+1/8*theta2^2*L0^4)*(theta2>0) + (1/4)*(theta2==0)
## }



## formulas for uniform model at alternative (pubbias #5)
## this unif.Z does not have var(Z)=1
## deprecate
unif.Z <- local({
    rZ <- function(n)runif(n,-1/2,1/2)
    dZ <- function(z)dunif(z,-1/2,1/2)
    pZ <- function(q)punif(q,-1/2,1/2)
    qZ <- function(u) (u-1/2)*(u>0)*(u<1)
    ## dZ.c <- function(z,cutoff) dunif(z,cutoff,1/2)
    rZ.c <- function(n,cutoff) runif(n,cutoff,1/2)#qZ(runif(n)*(1-pZ(cutoff))+pZ(cutoff))
    dZ.c <- function(z,cutoff) dunif(z,cutoff,1/2)
    ## pZ.c <- function(q,cutoff)(q>cutoff)*(pZ(q)-pZ(cutoff))/(1-pZ(cutoff))
    theta.to.cutoff <- function(theta)(2*theta-1/2)
    ## kernel.mean <- 1/6
    F.delta.c <- function(q,cutoff) (q>=0 & q<=1/2-cutoff)*(-q^2/2/(1/2-cutoff)^2+1/2+q/(1/2-cutoff)) + (q<0 & q>=-1/2+cutoff)*(1/2*(q/(1/2-cutoff)+1)^2) + 1*(q>1/2-cutoff)
    c.prime <- function(theta)2
    theta.max <- 1/3
    supp.Z <- c(-1/2,1/2)
    E.f.Z <- function(cutoff=-1/2)1/(1/2-cutoff) #deprecate
    E.f <- function(cutoff=-1/2)1/(1/2-cutoff)
    E.F.Z <- function(cutoff=-1/2)(1/3*(1/8-cutoff^3)-cutoff/2*(1/4-cutoff^2))/(1/2-cutoff)^2 #deprecate
    E.ZF <- function(cutoff=-1/2)(1/3*(1/8-cutoff^3)-cutoff/2*(1/4-cutoff^2))/(1/2-cutoff)^2
    var.Z <- function(cutoff=-1/2)1/12 / (1/2-cutoff)^2
    return(mget(ls()))
})
normal.Z <- local({
    rZ <- rnorm
    dZ <- dnorm
    pZ <- pnorm
    qZ <- qnorm
    rZ <- function(n,cutoff=-Inf) rnorm.trunc(n,0,1,cutoff)
    dZ <- function(z,cutoff=-Inf) dnorm.trunc(z,0,1,cutoff)
    pZ <- function(q,cutoff=-Inf) pnorm.trunc(q,0,1,cutoff)
    mu <- function(x)exp(log(dnorm(x))-log(1-pnorm(x)))
    theta.to.cutoff <- function(theta)uniroot(function(x)mu(x)-theta,c(-1,1),extendInt='yes')$root  #function(theta)2*theta-1/2
    ## kernel.mean <- integrate(function(x)dnorm(x)^2,-Inf,Inf)$val
    theta.max <- 1
    supp.Z <- c(-Inf,Inf)
    E.f <- E.ZF <- 1/(2*sqrt(pi))
    var.Z <- 1
    return(mget(ls()))
})
## make cutoff an class variable
normal.Z <- local({
    cutoff <- -Inf
    rZ <- rnorm
    dZ <- dnorm
    pZ <- pnorm
    qZ <- qnorm
    rZ <- function(n) rnorm.trunc(n,0,1,cutoff)
    dZ <- function(z) dnorm.trunc(z,0,1,cutoff)
    pZ <- function(q) pnorm.trunc(q,0,1,cutoff)
    mu <- function(x)exp(log(dnorm(x))-log(1-pnorm(x)))
    theta.to.cutoff <- function(theta)uniroot(function(x)mu(x)-theta,c(-1,1),extendInt='yes')$root  #function(theta)2*theta-1/2
    set.cutoff <- function(theta=-Inf)cutoff <<- theta.to.cutoff(theta)
    ## kernel.mean <- integrate(function(x)dnorm(x)^2,-Inf,Inf)$val
    theta.max <- 1
    supp.Z <- c(-Inf,Inf)
    E.f <- E.ZF <- 1/(2*sqrt(pi))
    var.Z <- 1
    return(mget(ls()))
})

Z.normal <- normal.Z

power.Z <- function(p) {
    stopifnot(p>=-1)
    const <- ((p+1)/2)^(1/(p+1))
    sigma <- sqrt(2/(p+3)*const^(p+3))
    dZ <- function(z)abs(z)^p*sigma^(p+1)*(abs(z)<=const/sigma)
    pZ <- function(q) 1/2+abs(q)^p*q*sigma^(p+1)/(p+1)*(abs(q)<=const/sigma) + (q>=const/sigma)
    pZ <- function(q) (1/2+abs(q)^p*q*sigma^(p+1)/(p+1))*(abs(q)<=const/sigma) + (q>=const/sigma)
    qZ <- function(y) (abs(y-1/2)*(p+1)/sigma^(p+1))^(1/(p+1))*(y>=0)*(y<=1)*sign(y-1/2)
    rZ <- function(n) qZ(runif(n))
    E.f <- 2/(2*p+1)*sqrt(2/(p+3))*((p+1)/2)^(5/2)
    E.ZF <- const^(p+2)/sigma/(p+1)*(  1/2*(p+1)/(p+2) + const^(p+1)/(p+2)/(2*p+3) )
## rhs <- function(p) {
## c <- ((p+1)/2)^(1/(p+1))
## sigma <- sqrt(2/(p+3)*c^(p+3))
##     2*c^(p+2)/sigma/(p+1)*(  1/2*(p+1)/(p+2) + c^(p+1)/(p+2)/(2*p+3) )
## }
##     E.f <- 1/sigma*(1/2-const)
##     E.ZF <- sigma/(1/2-const)^2*(1/3*(1/4+const/2+const^2)-const/2*(1/2+const))
    return(mget(ls()))
    ## return(list(        
    ##     dZ <- function(z)abs(z)^p*sigma^(p+1)*(abs(z)<=const/sigma),
    ##     pZ <- function(q) 1/2+abs(q)^p*q*sigma^(p+1)/(p+1)*(abs(q)<=const/sigma) + (q>=const/sigma),
    ##     qZ <- function(y) (abs(y-1/2)*(p+1)/sigma^(p+1))^(1/(p+1))*(y>=0)*(y<=1)*sign(y-1/2),
    ##     rZ <- function(n) qZ(runif(n)),
    ## ))
}

beta.Z <- function(ab=c(1,1)) {
    a <- ab[1]; b <- ab[2]
    var.beta <- a*b/(a+b)^2/(a+b+1)
    sd.beta <- sqrt(var.beta)
    rZ <- function(n)(rbeta(n,a,b)-1/2)/sd.beta
    dZ <- function(x)dbeta(1/2+x*sd.beta,a,b)*sd.beta
    pZ <- function(q)pbeta(1/2+q*sd.beta,a,b)
    return(mget(ls()))
}


unif.S <- function(supp.S=c(0,1)) {
    return(list(
        dS=function(s)dunif(s,supp.S[1],supp.S[2]),
        pS=function(q)punif(q,supp.S[1],supp.S[2]),
        rS=function(n)runif(n,supp.S[1],supp.S[2]),
        E.S2=diff(supp.S)^2/12 + mean(supp.S)^2,
        E.S1=mean(supp.S),
        m=function(k)integrate(function(s)s^k*dS(s),supp.S[1],supp.S[2]),
        mean.S.pair=with(list(b=supp.S[2],a=supp.S[1]), 1/(b-a)*((a^2+b^2)/3-2/3*a*b))
        ## return(mget(ls()))
    ))
}
unif.S <- function(supp.S=c(0,1)) {
    ## return(list(
    dS <- function(s)dunif(s,supp.S[1],supp.S[2])
    pS <- function(q)punif(q,supp.S[1],supp.S[2])
    rS <- function(n)runif(n,supp.S[1],supp.S[2])
    E.S2 <- diff(supp.S)^2/12 + mean(supp.S)^2
    E.S1 <- mean(supp.S)
    mu.S <- function(k)integrate(function(s)s^k*dS(s),supp.S[1],supp.S[2])$value
    mean.S.pair <- with(list(b=supp.S[2],a=supp.S[1]), 1/(b-a)*((a^2+b^2)/3-2/3*a*b)) # just (b-a)/3
    return(mget(ls()))    
}
S.unif <- unif.S

tau <- function(theta,cutoff=-1/2) { 
    l0 <- pmin(1,pmax(0,(1/2-cutoff)/abs(theta)))
    triangle <- -theta^2/2/(1/2-cutoff)^2*(l0^3/3-l0^4/4)+abs(theta)/(1/2-cutoff)*(l0^2/2-l0^3/3)+l0^2/4-l0/2+1/2    -1/4
    E.uncond <- 2*(1/4+sign(theta)*triangle)
    2*E.uncond - 1
}
kernel.cond <- function(z,s,theta,cutoff) {
    ## stopifnot(theta>0)
    z1 <- z; s1 <- s
    l1 <- 1/theta*(cutoff-z1+theta*s1)
    l2 <- 1/theta*(1/2-z1+theta*s1)
    1-s1 + 2*
        (if(theta>0) with(list(thresh=function(x)pmin(s1,pmax(0,x))), ((1/2-cutoff)*thresh(l1)+(1/2-z1+theta*s1)*(thresh(l2)-thresh(l1))-theta/2*(thresh(l2)^2-thresh(l1)^2))/(1/2-cutoff)) else   with(list(thresh=function(x)pmin(s1,pmax(0,x))), ((1/2-cutoff)*(s1-thresh(l1))+(1/2-z1+theta*s1)*(thresh(l1)-thresh(l2))-theta/2*(thresh(l1)^2-thresh(l2)^2))/(1/2-cutoff)))    -               with(list(thresh=function(x)pmin(1,pmax(0,x))),(theta<0)+sign(theta)*(((1/2-cutoff)*thresh(l1)+(1/2-z1+theta*s1)*(thresh(l2)-thresh(l1))-theta/2*(thresh(l2)^2-thresh(l1)^2))/(1/2-cutoff)))
}

## tau.hat(z,s,theta.fe) should = begg.test['stat'] but begg.test calls cor.test which can use an approximation, see
tau.hat <- function(z,s,theta) {
    n <- length(z)
    2*mean(apply(combn(n,2),2,function(idx)(z[idx[1]]-z[idx[2]])/(s[idx[1]]-s[idx[2]])<theta)) - 1
}
tau.hat <- function(z,s,theta,fast=FALSE) {
    if(fast) {
        cor(z-theta*s,s,method='kendall')
    } else {
        n <- length(z)
        2*mean(apply(combn(n,2),2,function(idx)(z[idx[1]]-z[idx[2]])/(s[idx[1]]-s[idx[2]])<theta)) - 1
    }
}
## same as cor.test((y-theta)/sqrt(v),v,method='kendall')$estimate
tau.hat.pi <- function(z,s,theta,cutoff=-1/2) 4*mean(kernel.cond(z,s,theta,cutoff))-2-tau(theta,cutoff)

## ###################################################################
## ## summer 2024 redoing unif-unif model functions for a variance 1 S
## ## comment out to run code blocks from before summer 2024

## ## updated version with var(Z)=1
## ## deprecate
## unif.Z <- local({
##     s <- 1/sqrt(1/12) # Z=s*Unif(-1/2,1/2)
##     rZ <- function(n,cutoff=-s/2) runif(n,cutoff,s/2)
##     dZ <- function(z,cutoff=-s/2) dunif(z,cutoff,s/2)
##     pZ <- function(q,cutoff=-s/2)punif(q,cutoff,s/2)
##     theta.to.cutoff <- function(theta)2*theta-s/2
##     E.f <- function(cutoff=-s/2)1/(s/2-cutoff)
##     E.ZF <- function(cutoff=-s/2) 1/(s/2-cutoff)^2 * (1/3*(s^3/8-cutoff^3) - cutoff/2*(s^2/4-cutoff^2))
##     ## E.f <- E.ZF <- 1/s
##     var.Z <- function(cutoff=-s/2)1/12 * (s/2-cutoff)^2
##     return(mget(ls()))
## })

trunc.distr <- function(lower,p.full,d.full,q.full) {
    p.trunc <- function(q) (q>=lower)*(p.full(q)-p.full(lower))/(1-p.full(lower))
    d.trunc <- function(x) (x>=lower)*d.full(x)/(1-p.full(lower))
    q.trunc <- function(p) q.full(p*(1-p.full(lower)) + p.full(lower))
    r.trunc <- function(n) q.trunc(runif(n))
    return(list(p=p.trunc,d=d.trunc,q=q.trunc,r=r.trunc))
}


Z.unif <- function(supp.Z=c(-sqrt(12)/2,sqrt(12)/2)) {
    ## s <- sqrt(12) # defn: Z=s*Unif(-1/2,1/2)
    s <- supp.Z[2]*2
    ## supp.Z <- c(cutoff,s)
    ## cutoff <- -s/2
    cutoff <- supp.Z[1]
    E.f <- 1/s
    E.ZF <-  1/(s)^2 * 1/3*(s^3/4) #+ s/4*(s^2/4-cutoff^2))
    var.Z <- 1/12 * (s)^2
    ## local({
    rZ <- function(n) runif(n,cutoff,s/2)
    dZ <- function(z) dunif(z,cutoff,s/2)
    pZ <- function(q)punif(q,cutoff,s/2)
    theta.to.cutoff <- function(theta)2*theta-s/2
    ## cutoff <- -s/2
    ## E.f <- 1/(s/2-cutoff)
    ## E.ZF <-  1/(s/2-cutoff)^2 * (1/3*(s^3/8-cutoff^3) - cutoff/2*(s^2/4-cutoff^2))
    ## var.Z <- 1/12 * (s/2-cutoff)^2
    ## cutoff <- -s/2
    ## set.cutoff <- function(theta=-Inf){
    ##     cutoff <<- theta.to.cutoff(theta)
    ##     supp.Z[1] <<- cutoff
    ## }
    ## get.cutoff <- function()return(cutoff)
    ## cc2 <- cutoff
    ##     return(mget(ls()))
    ## })
    return( structure(class='Z.distribution',mget(ls())) )
}

## s shouldnt be exposed, writing out s=supp.Z[2]*2
Z.unif <- function(supp.Z=c(-sqrt(12)/2,sqrt(12)/2)) {
    ## s <- sqrt(12) # defn: Z=s*Unif(-1/2,1/2)
    ## s <- supp.Z[2]*2
    ## supp.Z <- c(cutoff,s)
    ## cutoff <- -s/2
    cutoff <- supp.Z[1]
    E.f <- 1/(supp.Z[2]*2)
    E.ZF <-  1/(supp.Z[2]*2)^2 * 1/3*((supp.Z[2]*2)^3/4) #+ s/4*(s^2/4-cutoff^2))
    var.Z <- 1/12 * (supp.Z[2]*2)^2
    ## local({
    rZ <- function(n) runif(n,cutoff,supp.Z[2])
    dZ <- function(z) dunif(z,cutoff,supp.Z[2])
    pZ <- function(q)punif(q,cutoff,supp.Z[2])
    theta.to.cutoff <- function(theta)2*theta-supp.Z[2]
    ## cutoff <- -s/2
    ## E.f <- 1/(s/2-cutoff)
    ## E.ZF <-  1/(s/2-cutoff)^2 * (1/3*(s^3/8-cutoff^3) - cutoff/2*(s^2/4-cutoff^2))
    ## var.Z <- 1/12 * (s/2-cutoff)^2
    ## cutoff <- -s/2
    ## set.cutoff <- function(theta=-Inf){
    ##     cutoff <<- theta.to.cutoff(theta)
    ##     supp.Z[1] <<- cutoff
    ## }
    ## get.cutoff <- function()return(cutoff)
    ## cc2 <- cutoff
    ##     return(mget(ls()))
    ## })
    ## print(ls())
    return( structure(class='Z.distribution',mget(ls())) )
}

Z.normal <- function(supp.Z=c(-Inf,Inf)) {
    cutoff <- supp.Z[1]
    ## cutoff <- -Inf
    ## rZ <- rnorm
    ## dZ <- dnorm
    ## pZ <- pnorm
    ## qZ <- qnorm
    normal.trunc <- trunc.distr(lower=cutoff,p.full=pnorm,d.full=dnorm,q.full=qnorm)
    rZ <- normal.trunc$r
    dZ <- normal.trunc$d
    pZ <- normal.trunc$p
    qZ <- normal.trunc$q
    ## rZ <- function(n) rnorm.trunc(n,0,1,cutoff)
    ## dZ <- function(z) dnorm.trunc(z,0,1,cutoff)
    ## pZ <- function(q) pnorm.trunc(q,0,1,cutoff)
    theta.to.cutoff <- function(theta) {
        if(theta==0)return(-Inf)
        with(list(    mu = function(x)exp(log(dnorm(x))-log(1-pnorm(x))) ),
             uniroot(function(x)mu(x)-theta,c(-1,1),extendInt='yes')$root  )
    }
    ## set.cutoff <- function(theta=-Inf)cutoff <<- theta.to.cutoff(theta)
    ## kernel.mean <- integrate(function(x)dnorm(x)^2,-Inf,Inf)$val
    ## theta.max <- 1
    ## supp.Z <- c(-Inf,Inf)
    E.f <- E.ZF <- 1/(2*sqrt(pi))
    var.Z <- 1
    return( structure(class='Z.distribution',mget(ls())) )
}


Z.t <- function(df) {
    stopifnot(df>2)
    function(supp.Z=c(-Inf,Inf)) {
        cutoff <- supp.Z[1]
        sigma <- sqrt(df/(df-2))
        const <- gamma((df+1)/2)/sqrt(pi*df)/gamma(df/2) ## integrating factor
        t.trunc <- trunc.distr(lower=cutoff,p.full=function(q)pt(q*sigma,df),
                               d.full=function(x)dt(x*sigma,df)*sigma,
                               q.full=function(p)1/sigma*qt(p,df))
        rZ <- t.trunc$r
        dZ <- t.trunc$d
        pZ <- t.trunc$p
        qZ <- t.trunc$q
        theta.to.cutoff <- function(theta) {
            if(theta==0)return(-Inf)
            ## mu.gold <- function(cutoff)integrate(function(z)z*dZ(z),cutoff,Inf)$val
            mu  <-  function(cutoff)1/(1-pt(cutoff*sigma,df))*const/sigma*df/(df-1)*(1+sigma^2*cutoff^2/df)^((1-df)/2)
            uniroot(function(x)mu(x)-theta,c(-1,1),extendInt='yes')$root  
        }
        E.f <-1/sqrt(pi)/sqrt(df-2)*gamma((df+1)/2)^2/gamma(df/2)^2*gamma(df+1/2)/gamma(df+1)
        E.ZF <- 2*const^2*df^2*sqrt(df-2)/(df-1)*beta(3/2,df-1/2)
        var.Z <- 1
        return( structure(class='Z.distribution',mget(ls())) )
    }
}


Z.beta <- function(a,b) {
    stopifnot(a>0 && b>0)
    ## function(supp.Z=c(-Inf,Inf)) {
    function(supp.Z= (c(0,1) - a/(a+b)) / sqrt(a*b/(a+b)^2/(a+b+1))) {
        cutoff <- supp.Z[1]
        mu <- a/(a+b)
        sigma2 <- a*b/(a+b)^2/(a+b+1)
        sigma <- sqrt(sigma2)
        ## const <- gamma((df+1)/2)/sqrt(pi*df)/gamma(df/2) ## integrating factor
        beta.trunc <- trunc.distr(lower=cutoff,p.full=function(q)pbeta(q*sigma+mu,a,b),
                               d.full=function(x)dbeta(x*sigma+mu,a,b)*sigma,
                               q.full=function(p)(qbeta(p,a,b)-mu)/sigma)
        rZ <- beta.trunc$r
        dZ <- beta.trunc$d
        pZ <- beta.trunc$p
        qZ <- beta.trunc$q
        theta.to.cutoff <- function(theta) {
            if(theta==0)return(-Inf)
            ## mu.gold <- function(cutoff)integrate(function(z)z*dZ(z),cutoff,Inf)$val
            cutoff.to.theta  <-  function(cutoff)-mu/sigma + 1/sigma/(1-pbeta(sigma*cutoff+mu,a,b))*beta(a+1,b)/beta(a,b)*(1-pbeta(cutoff*sigma+mu,a+1,b))
            uniroot(function(x)cutoff.to.theta(x)-theta,c(-1,1),extendInt='yes')$root  
        }
        E.f <- sigma*beta(2*a-1,2*b-1)/beta(a,b)^2
        E.ZF <- with(list(d.full=function(x)dbeta(x*sigma+mu,a,b)*sigma,
                          p.full=function(q)pbeta(q*sigma+mu,a,b),
                          supp.Z= (c(0,1) - a/(a+b)) / sqrt(a*b/(a+b)^2/(a+b+1))),
                     integrate(function(z)z*d.full(z)*p.full(z),supp.Z[1],supp.Z[2])$val)
        var.Z <- 1
        return( structure(class='Z.distribution',mget(ls())) )
    }
}



## zz <- Z.unif()
## zz$set.cutoff(.1)
## range(zz$rZ(1e3))


## dd


## Z.unif <- function(supp.Z=c(-sqrt(12)/2,sqrt(12)/2)) {
##     structure(class='Z.distribution',
##               list(
##                   ## s <- sqrt(12) # defn: Z=s*Unif(-1/2,1/2)
##                   s = supp.Z[2]*2,
##                   ## supp.Z <- c(cutoff,s)
##                   cutoff = -s/2,
##                   rZ = function(n,cutoff=-s/2) runif(n,cutoff,s/2),
##                   dZ = function(z,cutoff=-s/2) dunif(z,cutoff,s/2),
##                   pZ = function(q,cutoff=-s/2)punif(q,cutoff,s/2),
##                   theta.to.cutoff = function(theta)2*theta-s/2,
##                   ## cutoff = -s/2
##                   ## E.f = 1/(s/2-cutoff)
##                   ## E.ZF =  1/(s/2-cutoff)^2 * (1/3*(s^3/8-cutoff^3) - cutoff/2*(s^2/4-cutoff^2))
##                   ## var.Z = 1/12 * (s/2-cutoff)^2
##                   ## cutoff = -s/2
##                   E.f = 1/s,
##                   E.ZF =  1/(s)^2 * 1/3*(s^3/4), #+ s/4*(s^2/4-cutoff^2))
##                   var.Z = 1/12 * (s)^2,
##                   set.cutoff = function(theta=-Inf){
##                       cutoff <<- theta.to.cutoff(theta)
##                       supp.Z[1] <<- cutoff
##                   }
##               ))
## }



## unif.S <- function(supp.S=c(0,1)) {
##     structure(class='S.distribution',
##               list(
##                   dS <- function(s)dunif(s,supp.S[1],supp.S[2])
##                   pS <- function(q)punif(q,supp.S[1],supp.S[2])
##                   rS <- function(n)runif(n,supp.S[1],supp.S[2])
##                   E.S2 <- diff(supp.S)^2/12 + mean(supp.S)^2
##                   E.S1 <- mean(supp.S)
##                   mu.S <- function(k)integrate(function(s)s^k*dS(s),supp.S[1],supp.S[2])$value
##                   mean.S.pair <- with(list(b=supp.S[2],a=supp.S[1]), 1/(b-a)*((a^2+b^2)/3-2/3*a*b))
##                   ## return(mget(ls()))
##               ))
## }

unif.S <- function(S.par=c(0,1)) {
    supp.S <- S.par
    dS <- function(s)dunif(s,supp.S[1],supp.S[2])
    pS <- function(q)punif(q,supp.S[1],supp.S[2])
    rS <- function(n)runif(n,supp.S[1],supp.S[2])
    E.S2 <- diff(supp.S)^2/12 + mean(supp.S)^2
    E.S1 <- mean(supp.S)
    mu.S <- function(k)integrate(function(s)s^k*dS(s),supp.S[1],supp.S[2])$value
    mean.S.pair <- with(list(b=supp.S[2],a=supp.S[1]), 1/(b-a)*((a^2+b^2)/3-2/3*a*b))
    var.S <- 1/12*diff(supp.S)^2
    return( structure(class='S.distribution',mget(ls())) )
}

S.unif <- unif.S



## ## version taking cutoff as a paramters. decided against--main reason
## ## was to avoid expressions like E.f() but actually E.f, E.ZF etc are
## ## only used at theta=0 unif.Z <- function(cutoff=-1/sqrt(1/12)) {
## Z.unif <- function(theta=0) {
##     s <- 1/sqrt(1/12) # Z=s*Unif(-1/2,1/2)
##     theta.to.cutoff <- function(theta)2*theta-s/2
##     cutoff <- theta.to.cutoff(theta)
##     rZ <- function(n) runif(n,cutoff,s/2)
##     dZ <- function(z) dunif(z,cutoff,s/2)
##     pZ <- function(q)punif(q,cutoff,s/2)
##     E.f <- 1/(s/2-cutoff)
##     E.ZF <- 1/(s/2-cutoff)^2 * (1/3*(s^3/8-cutoff^3) - cutoff/2*(s^2/4-cutoff^2))
##     ## E.f <- E.ZF <- 1/s
##     var.Z <- 1/12 * (s/2-cutoff)^2
##     return(mget(ls()))
## }


S.beta <- function(S.par=c(a=1,b=1,shift=0)) {
    dS <- function(s)dbeta(s-S.par['shift'],S.par['a'],S.par['b'])
    pS <- function(q)pbeta(q-S.par['shift'],S.par['a'],S.par['b'])
    rS <- function(n)rbeta(n,S.par['a'],S.par['b'])+S.par['shift']
    E.S1 <- with(as.list(S.par),a/(a+b)) + S.par['shift']
    var.S <- with(as.list(S.par), a*b/(a+b)^2/(a+b+1))
    supp.S <- c(0,1)+S.par['shift']
    E.S2 <- E.S1^2 + var.S
    mean.S.pair <- 2 * integrate(function(s)pS(s)*(1-pS(s)), supp.S[1],supp.S[2])$val
    return( structure(class='S.distribution',mget(ls())) )
}


S.lognormal <- function(S.par=c(meanlog=0,sdlog=1,shift=0)) {
    dS <- function(s)dlnorm(s-S.par['shift'],S.par['meanlog'],S.par['sdlog'])
    pS <- function(q)plnorm(q-S.par['shift'],S.par['meanlog'],S.par['sdlog'])
    rS <- function(n)rlnorm(n,S.par['meanlog'],S.par['sdlog'])+S.par['shift']
    E.S1 <- with(as.list(S.par),exp(meanlog+sdlog^2/2)) + S.par['shift']
    var.S <- with(as.list(S.par),  (exp(sdlog^2)-1)*exp(2*meanlog+sdlog^2) )
    supp.S <- c(0,Inf)+S.par['shift']
    E.S2 <- E.S1^2 + var.S
    mean.S.pair <- 2 * integrate(function(s)pS(s)*(1-pS(s)), supp.S[1],supp.S[2])$val
    return( structure(class='S.distribution',mget(ls())) )
}

## type 1 pareto. EnvStats::pareto man page maps to wikipedia
## paremters as shape=theta --> alpha, location=eta --> sigma
## [these haven't been checked well]
S.pareto <- function(S.par=c(location=1,shape=1)) {
    stopifnot(S.par['shape'] > 2)
    dS <- function(s)EnvStats::dpareto(s,location=S.par['location'],shape=S.par['shape'])
    pS <- function(q)EnvStats::ppareto(q,location=S.par['location'],shape=S.par['shape'])
    rS <- function(s)EnvStats::rpareto(n,location=S.par['location'],shape=S.par['shape'])
    E.S1 <- with(as.list(S.par), location*shape / (shape - 1))
    E.S2 <- with(as.list(S.par), location^2*shape / (shape - 2))
    var.S <- E.S2 - (E.S1)^2
    supp.S <- c(0,Inf)+S.par['location']
    mean.S.pair <- 2 * integrate(function(s)pS(s)*(1-pS(s)), supp.S[1],supp.S[2])$val
    return( structure(class='S.distribution',mget(ls())) )
    }

## routines needed for tau, tau.pi under the unif-unif model
dunif.diff <- function(z,lower=0,upper=1) {
    a <- lower; b <- upper
    stopifnot(a<=b)
    1/(b-a)^2*((b-a+z)*(a-b<=z & z<=0) + (b-a-z)*(0<=z & z<=b-a))
}

punif.diff <- function(q,lower=0,upper=1) {
    a <- lower; b <- upper
    stopifnot(a<=b)
    ## 1/(b-a)^2*1/2*(min(b,b-q)^2-max(a,a-q)^2)*(min(b,b-q)>max(a,a-q)) + 1-punif(b-q,a,b) + (q-a)/(b-a)*(punif(b-q,a,b)-punif(a-q,a,b))
    (1 + 1/(b-a)^2*( (b-a)*(-1/2*(b-a)+q)+q^2/2 ))*( a-b<=q & q<0) + (1 + 1/(b-a)^2*( (b-q)*(-1/2*(b-q)+a)-a^2/2 ))*(0<=q & q<b-a) + (b-a <= q)    
}

## pkernel <- function(theta,a,b,c,d) {
##     tryCatch(
##         2*integrate(function(s)punif.diff(theta*s,a,b)*dunif.diff(s,c,d),0,Inf)$val,
##         error=function(e)NA)
## }
## tau.new <- function(theta,cutoff=-1/2,b=1/2,c=0,d=1) {
##     E.uncond <- pkernel(theta,cutoff,b,c,d)
##     2*E.uncond - 1
##     }
## kernel.cond.new <- function(z1,s1,theta,a,b,c,d) {
##     tryCatch(
##         integrate(function(s)punif(z1+theta*(s-s1),a,b)*dunif(s,c,d),s1,Inf)$val - integrate(function(s)punif(z1+theta*(s-s1),a,b)*dunif(s,c,d),-Inf,s1)$val + punif(s1,c,d),
##         error=function(e)NA)
## }
## kernel.cond.new <- Vectorize(kernel.cond.new,vectorize.args=c('z1','s1'))

## ## tau.hat.pi <- function(z,s,theta,cutoff=-1/2) 4*mean(kernel.cond(z,s,theta,cutoff))-2-tau(theta,cutoff)

## tau.hat.pi.new <- function(z,s,theta,cutoff=-1/2,b=1/2,c=0,d=1) 4*mean(kernel.cond.new(z,s,theta,cutoff,b,c,d))-2-tau.new(theta,cutoff,b,c,d)


## ## ## kernel.cond(z,s,theta,cutoff) = kernel.cond.new(z,s,theta,cutoff,1/2,0,1)
## ## ## tau(theta,cutoff)
## ## ## tau.new(theta,cutoff)
## ## cutoff should be constructor
## ZS.uniform.uniform <- function(supp.Z=c(-sqrt(12)/2,sqrt(12)/2),supp.S=c(0,1)) {
##     ## with(c(Z.unif(supp.Z),  S.unif(supp.S)), {
##     pkernel <- function(q,supp.Z,supp.S) {
##         a <- supp.Z[1]; b <- supp.Z[2]
##         c <- supp.S[1]; d <- supp.S[2]
##         tryCatch(
##             2*integrate(function(s)punif.diff(q*s,a,b)*dunif.diff(s,c,d),0,Inf)$val,
##             error=function(e)NA)
##     }
##     ## tau.new <- function(theta,cutoff=-1/2,b=1/2,c=0,d=1) {
##     tau <- function(theta) {
##         E.uncond <- pkernel(theta,supp.Z,supp.S)
##         2*E.uncond - 1
##     }
##     ## kernel.cond.new <- function(z1,s1,theta,a,b,c,d) {
##     kernel.cond <- function(z1,s1,theta) {
##         a <- supp.Z[1]; b <- supp.Z[2]
##         c <- supp.S[1]; d <- supp.S[2]
##         tryCatch(
##             integrate(function(s)punif(z1+theta*(s-s1),a,b)*dunif(s,c,d),s1,Inf)$val - integrate(function(s)punif(z1+theta*(s-s1),a,b)*dunif(s,c,d),-Inf,s1)$val + punif(s1,c,d),
##             error=function(e)NA)
##     }
##     kernel.cond <- Vectorize(kernel.cond,vectorize.args=c('z1','s1'))
##     ## tau.hat.pi <- function(z,s,theta,cutoff=-1/2) 4*mean(kernel.cond(z,s,theta,cutoff))-2-tau(theta,cutoff)
##     ## tau.hat.pi.new <- function(z,s,theta,cutoff=-1/2,b=1/2,c=0,d=1)
##     ##     4*mean(kernel.cond.new(z,s,theta,cutoff,b,c,d))-2-tau.new(theta,cutoff,b,c,d)
##     tau.hat.pi <- function(z,s,theta)
##         4*mean(kernel.cond(z,s,theta))-2-tau(theta)
##     ## get.supp.Z <- function()return(supp.Z)
##     ## get.cutoff <- function()return(cutoff)
##     ## mget(ls())
##     ## })
##     ## }
##     structure(class='ZS.distribution',
##               c(    Z.unif(supp.Z),    S.unif(supp.S), mget(ls()) ) )
##     ## mget(ls()))
## }


## point <- function(x, y){
##     structure(class = "point",
##               list(
##                   x = x,
##                   y = y,
##                   get_x = function() paste('(', x,',',y,')'),
##                   set_x = function(x, y){
##                       x <<- x
##                       y <<- y
##                   }
##               ))
## }
## point <- function(x, y){
##     u <- x^2
##     get_x = function() paste('(', x,',',y,')')
##     set_x = function(x,y) {
##         x <<- x
##         y <<- y
##         u <<- x^2
##     }
##     get_u  <- function()u
##     structure(class = "point",mget(ls()))
## }

## x <- 0
## y <- 1

## p <- point(0,1)
## p$get_x()

## p$set_x(6,5)
## p$get_x()

## ## need to figure out a way to combine Z.unif,S.unif if plan on using state for cutoff, had issues with scoping. dumping them together for now. may have to uses s4 classes.
## ## kernel.cond(z,s,theta,cutoff) = kernel.cond.new(z,s,theta,cutoff,1/2,0,1)
## ## tau(theta,cutoff)
## ## tau.new(theta,cutoff)
## ZS.uniform.uniform <- function(supp.Z=c(-sqrt(12)/2,sqrt(12)/2),supp.S=c(0,1)) {

##     s <- supp.Z[2]*2
##     ## supp.Z <- c(cutoff,s)
##     cutoff <- -s/2
##     E.f <- 1/s
##     E.ZF <-  1/(s)^2 * 1/3*(s^3/4) #+ s/4*(s^2/4-cutoff^2))
##     var.Z <- 1/12 * (s)^2
##     ## local({
##     rZ <- function(n) runif(n,cutoff,s/2)
##     dZ <- function(z) dunif(z,cutoff,s/2)
##     pZ <- function(q)punif(q,cutoff,s/2)
##     theta.to.cutoff <- function(theta)2*theta-s/2
##     ## cutoff <- -s/2
##     ## E.f <- 1/(s/2-cutoff)
##     ## E.ZF <-  1/(s/2-cutoff)^2 * (1/3*(s^3/8-cutoff^3) - cutoff/2*(s^2/4-cutoff^2))
##     ## var.Z <- 1/12 * (s/2-cutoff)^2
##     ## cutoff <- -s/2
##     set.cutoff <- function(theta=-Inf){
##         cutoff <<- theta.to.cutoff(theta)
##         supp.Z[1] <<- cutoff
##     }
##     ## get.cutoff <- function()return(cutoff)
##     ## cc2 <- cutoff
##     ##     return(mget(ls()))

##     ## specific to uniform S
##     dS <- function(s)dunif(s,supp.S[1],supp.S[2])
##     pS <- function(q)punif(q,supp.S[1],supp.S[2])
##     rS <- function(n)runif(n,supp.S[1],supp.S[2])
##     E.S2 <- diff(supp.S)^2/12 + mean(supp.S)^2
##     E.S1 <- mean(supp.S)
##     mu.S <- function(k)integrate(function(s)s^k*dS(s),supp.S[1],supp.S[2])$value
##     mean.S.pair <- with(list(b=supp.S[2],a=supp.S[1]), 1/(b-a)*((a^2+b^2)/3-2/3*a*b))


##     ## specific to uniform-uniform model
##     pkernel <- function(q,supp.Z,supp.S) {
##         a <- supp.Z[1]; b <- supp.Z[2]
##         c <- supp.S[1]; d <- supp.S[2]
##         tryCatch(
##             2*integrate(function(s)punif.diff(q*s,a,b)*dunif.diff(s,c,d),0,Inf)$val,
##             error=function(e)NA)
##     }
##     ## tau.new <- function(theta,cutoff=-1/2,b=1/2,c=0,d=1) {
##     tau <- function(theta) {
##         E.uncond <- pkernel(theta,supp.Z,supp.S)
##         2*E.uncond - 1
##     }
##     ## kernel.cond.new <- function(z1,s1,theta,a,b,c,d) {
##     kernel.cond <- function(z1,s1,theta) {
##         a <- supp.Z[1]; b <- supp.Z[2]
##         c <- supp.S[1]; d <- supp.S[2]
##         tryCatch(
##             integrate(function(s)punif(z1+theta*(s-s1),a,b)*dunif(s,c,d),s1,Inf)$val - integrate(function(s)punif(z1+theta*(s-s1),a,b)*dunif(s,c,d),-Inf,s1)$val + punif(s1,c,d),
##             error=function(e)NA)
##     }
##     kernel.cond <- Vectorize(kernel.cond,vectorize.args=c('z1','s1'))
##     ## tau.hat.pi <- function(z,s,theta,cutoff=-1/2) 4*mean(kernel.cond(z,s,theta,cutoff))-2-tau(theta,cutoff)
##     ## tau.hat.pi.new <- function(z,s,theta,cutoff=-1/2,b=1/2,c=0,d=1)
##     ##     4*mean(kernel.cond.new(z,s,theta,cutoff,b,c,d))-2-tau.new(theta,cutoff,b,c,d)
##     tau.hat.pi <- function(z,s,theta)
##         4*mean(kernel.cond(z,s,theta))-2-tau(theta)
##     get.supp.Z <- function()return(supp.Z)
##     get.cutoff <- function()return(cutoff)
##     structure(class='ZS.distribution',  mget(ls()))
## })


## checked against metafor in #13a. this version hast a not fast
## option that computes that true begg statistic not the approximation
## that cor.test uses. TODO: same interface as below egger.test,
## z.stat and labels, use the standard hyp test class.
begg.test <- function(y,v,method='kendall',exact=FALSE,...) {
    theta.fe <- sum(y/v)/sum(1/v)
    if(!exact) {
        with(cor.test((y-theta.fe)/sqrt(v-1/sum(1/v)),v,method=method,...),
             structure(unname(c(stat=estimate,pval=p.value)),names=c('statistic','p.value')))
    } else {
        s <- 1/sqrt(v)
        z <- y*s
        theta.fe <- sum(z*s)/sum(s^2) # already calculated, clean
        n <- length(z)
        tau.hat <- 2*mean(apply(combn(n,2),2,function(idx)(z[idx[1]]-z[idx[2]])/(s[idx[1]]-s[idx[2]])<theta.fe)) - 1
        pval <- 2*(1-pnorm(sqrt(9*n/4)*abs(tau.hat)))
        c(stat=tau.hat,pval=pval)
    }
}

## want both statistic and z-statistic, before just had statistic
egger.test <- function(y,v,robust=FALSE) {
    lm0 <- if(robust) {
               estimatr::lm_robust(I(y/sqrt(v)) ~ I(1/sqrt(v)))
           } else {
               lm(I(y/sqrt(v)) ~ I(1/sqrt(v)))
           }
    ## structure(unname(coef(summary(lm0))[1,c(1,4)]), names=c('stat','pval'))
    structure(unname(coef(summary(lm0))[1,c(1,3,4)]), names=c('statistic','z.statistic','p.value'))
}

## taking cutoff as a constructor
ZS.uniform.uniform <- function(supp.Z=c(-sqrt(12)/2,sqrt(12)/2), supp.S=c(0,1), cutoff.mean=0) {
    supp.Z[1] <- Z.unif(supp.Z)$theta.to.cutoff(cutoff.mean)
    par.Z <- Z.unif(supp.Z)
    par.S <- S.unif(supp.S)

    asy.var.begg <- with(par.Z, with(par.S,
                                4/9 + 4*mean.S.pair^2/E.S2*E.f*(E.f*var.Z-2*E.ZF) )
                    )
    asy.var.egger <- with(par.Z, with(par.S,
                  E.S2*var.Z/var.S
                    ))
    ## with(c(Z.unif(supp.Z),  S.unif(supp.S)), {
    ## this isnt actually the u-statistic kernel, just the ratio of diferences. need to rename throughout.
    pkernel <- function(q,supp.Z,supp.S) {
        a <- supp.Z[1]; b <- supp.Z[2]
        c <- supp.S[1]; d <- supp.S[2]
        tryCatch(
            2*integrate(function(s)punif.diff(q*s,a,b)*dunif.diff(s,c,d),0,Inf)$val,
            error=function(e)NA)
    }
    ## tau.new <- function(theta,cutoff=-1/2,b=1/2,c=0,d=1) {
    tau <- function(theta) {
        E.uncond <- pkernel(theta,supp.Z,supp.S)
        2*E.uncond - 1
    }
    ## kernel.cond.new <- function(z1,s1,theta,a,b,c,d) {
    kernel.cond <- function(z1,s1,theta) {
        a <- supp.Z[1]; b <- supp.Z[2]
        c <- supp.S[1]; d <- supp.S[2]
        tryCatch(
            integrate(function(s)punif(z1+theta*(s-s1),a,b)*dunif(s,c,d),s1,Inf)$val - integrate(function(s)punif(z1+theta*(s-s1),a,b)*dunif(s,c,d),-Inf,s1)$val + punif(s1,c,d),
            error=function(e)NA)
    }
    kernel.cond <- Vectorize(kernel.cond,vectorize.args=c('z1','s1'))
    ## tau.hat.pi <- function(z,s,theta,cutoff=-1/2) 4*mean(kernel.cond(z,s,theta,cutoff))-2-tau(theta,cutoff)
    ## tau.hat.pi.new <- function(z,s,theta,cutoff=-1/2,b=1/2,c=0,d=1)
    ##     4*mean(kernel.cond.new(z,s,theta,cutoff,b,c,d))-2-tau.new(theta,cutoff,b,c,d)
    tau.hat.pi <- function(z,s,theta)
        4*mean(kernel.cond(z,s,theta))-2-tau(theta)
    ## get.supp.Z <- function()return(supp.Z)
    ## get.cutoff <- function()return(cutoff)
    ## mget(ls())
    ## })
    ## }
    structure(class='ZS.distribution', c(par.Z, par.S, mget(ls())))
              ## c(    Z.unif(supp.Z),    S.unif(supp.S), mget(ls()) ) )
    ## mget(ls()))
}


## don't have routines for tau, tau.pi etc. just enough for test slope.
## [deprecate--use ZS.distr instead]
ZS.normal.uniform <- function(supp.Z=c(-Inf,Inf), supp.S=c(0,1), cutoff.mean=0) {
    supp.Z[1] <-     if(cutoff.mean==0) -Inf else Z.normal(supp.Z)$theta.to.cutoff(cutoff.mean)
    par.Z <- Z.normal(supp.Z)
    par.S <- S.unif(supp.S)

    asy.var.begg <- with(par.Z, with(par.S,
                                4/9 + 4*mean.S.pair^2/E.S2*E.f*(E.f*var.Z-2*E.ZF) )
                    )
    asy.var.egger <- with(par.Z, with(par.S,
                  E.S2*var.Z/var.S
                    ))
    structure(class='ZS.distribution', c(par.Z, par.S, mget(ls())))
              ## c(    Z.unif(supp.Z),    S.unif(supp.S), mget(ls()) ) )
    ## mget(ls()))
}

## object combining Z an S meethods but not many methods depending on
## both other than asy variances. enough for test slope. omits
## tau,tau.pi etc which are in ZS.uniform.uniform.
ZS.distr <- function(Z.distr,par.S,supp.Z=NULL,cutoff.mean=0) {
    supp.Z[1] <- Z.distr(supp.Z)$theta.to.cutoff(cutoff.mean)
    par.Z <- Z.distr(supp.Z)
    ## par.S <- S.distr(S.par)
    asy.var.begg <- with(par.Z, with(par.S,
                                     4/9 + 4*mean.S.pair^2/E.S2*E.f*(E.f*var.Z-2*E.ZF) 
                         ))
    asy.var.egger <- with(par.Z, with(par.S,
                                      E.S2*var.Z/var.S
                                      ))
    slope.begg <- with(par.Z, with(par.S,
                                     2*E.S1/E.S2*E.f*mean.S.pair / sqrt(asy.var.begg) 
                         ))
    slope.egger <- 1/sqrt(asy.var.egger)
    ARE <- (slope.egger/slope.begg)^2
    structure(class='ZS.distribution', c(par.Z, par.S, mget(ls())))
}

## TODO
## for S.unif etc, can have parameters directly passed rather than as a vector? eg S.unif(a=,b=) rather than S.unif(c(a=,b=))
